# 工作流名称
name: Build Docker Image

# push tag 时触发执行
on:
  push:
    tags:
      - v*

# 定义环境变量, 后面会使用
# 定义 APP_NAME 用于 docker build-args
# 定义 DOCKERHUB_REPO 标记 docker hub repo 名称
env:
  APP_NAME: discord-bot-upload-cf
  REPO_NAME: shimima13/discord-bot-upload-cf
  AWS_APP_PATH: ~/app/discord-bot-upload-cf
  DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
  CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
  CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}

jobs:
  main:
    # 在 Ubuntu 上运行
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            name/app
            ghcr.io/username/app            
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
      # 设置 QEMU, 后面 docker buildx 依赖此.
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      # 设置 Docker buildx, 方便构建 Multi platform 镜像
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      # 登录 GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # 通过 git 命令获取当前 tag 信息, 存入环境变量 APP_VERSION
      - name: Generate App Version
        run: echo APP_VERSION=`git describe --tags --always` >> $GITHUB_ENV
        
      - name: Set up environment variables
        run: |
          echo "DISCORD_BOT_TOKEN=${{ secrets.DISCORD_BOT_TOKEN }}" >> $GITHUB_ENV
          echo "CLOUDFLARE_API_TOKEN=${{ secrets.CLOUDFLARE_API_TOKEN }}" >> $GITHUB_ENV
          echo "CLOUDFLARE_ZONE_ID=${{ secrets.CLOUDFLARE_ZONE_ID }}" >> $GITHUB_ENV

      # 构建 Docker 并推送到 GitHub Container Registry
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          # 是否 docker push
          push: true
          # docker build arg, 注入 APP_NAME/APP_VERSION
          build-args: |
            APP_NAME=${{ env.APP_NAME }}
            APP_VERSION=${{ env.APP_VERSION }}
          # 生成两个 docker tag: ${APP_VERSION} 和 latest
          tags: ghcr.io/${{ env.REPO_NAME }}:${{ env.APP_VERSION }}, ghcr.io/${{ env.REPO_NAME }}:latest
      # AWS scp docker-compose.yml
      - name: Copy docker-compose.yml via scp
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.AWS_SSH_HOST }}
          username: ${{ secrets.AWS_SSH_USERNAME }}
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          port: ${{ secrets.AWS_SSH_PORT }}
          source: "docker-compose.yml"
          target: ${{ env.AWS_APP_PATH }}
      # AWS 部署
      - name: AWS deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AWS_SSH_HOST }}
          username: ${{ secrets.AWS_SSH_USERNAME }}
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          port: ${{ secrets.AWS_SSH_PORT }}
          script: |
            cd ${{ env.AWS_APP_PATH }}
            docker pull ghcr.io/shimima13/nextjs-boilerplate:latest
            docker-compose down
            docker-compose up -d